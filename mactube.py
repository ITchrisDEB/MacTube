#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MacTube - YouTube Downloader moderne pour macOS
Application native avec d√©tection compl√®te des qualit√©s YouTube
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import filedialog, messagebox
import os
import sys
import re
import time
import threading
import json
import io
import queue
from pathlib import Path
from datetime import datetime

# Imports pour le t√©l√©chargement
import yt_dlp
import requests

# Imports personnalis√©s
from mactube_theme import MacTubeTheme, setup_mactube_theme
from mactube_components import MacTubeNavigation, MacTubeCard, MacTubeProgressBar, MacTubeThumbnail
from mactube_ffmpeg import get_ffmpeg_path
from mactube_audio import MacTubeAudioExtractor
from transcodeur import MacTubeTranscoder

class DownloadTask:
    """T√¢che de t√©l√©chargement pour la file d'attente"""
    
    def __init__(self, url, quality, output_format, filename, download_path, task_type="video"):
        self.url = url
        self.quality = quality
        self.output_format = output_format
        # Forcer un nom de fichier par d√©faut si vide
        self.filename = filename if (filename and filename.strip()) else "%(title)s"
        self.download_path = download_path
        self.task_type = task_type  # "video" ou "audio"
        self.status = "En attente"
        self.progress = 0
        self.speed = "0 MB/s"
        self.eta = "Calcul..."
        self.created_at = datetime.now()
        self.id = f"task_{int(time.time())}_{id(self)}"
        self.video_title = self._extract_video_title()
    
    def _extract_video_title(self):
        """Extrait le titre de la vid√©o depuis l'URL ou le nom de fichier"""
        if self.filename and self.filename != "Nom personnalis√© (optionnel)" and self.filename != "%(title)s":
            return self.filename
        elif "youtube.com" in self.url or "youtu.be" in self.url:
            # Extraire l'ID de la vid√©o pour un titre court
            import re
            video_id_match = re.search(r'(?:youtube\.com/watch\?v=|youtu\.be/)([a-zA-Z0-9_-]+)', self.url)
            if video_id_match:
                video_id = video_id_match.group(1)
                # Essayer d'extraire le vrai titre de la vid√©o
                try:
                    import yt_dlp
                    ydl_opts = {'quiet': True, 'no_warnings': True}
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        info = ydl.extract_info(f"https://www.youtube.com/watch?v={video_id}", download=False)
                        return info.get('title', f"YouTube Video ({video_id[:8]}...)")
                except:
                    return f"YouTube Video ({video_id[:8]}...)"
        return "Vid√©o inconnue"
    
class TranscodeTask:
    """T√¢che de transcodage pour la file d'attente"""
    
    def __init__(self, input_path, output_format, quality, output_path, task_type, download_path):
        self.input_path = input_path
        self.output_format = output_format
        self.quality = quality
        self.output_path = output_path
        self.task_type = task_type  # "video_conversion", "audio_extraction", "audio_conversion"
        self.download_path = download_path
        self.status = "En attente"
        self.progress = 0
        self.speed = "0 MB/s"
        self.eta = "Calcul..."
        self.created_at = datetime.now()
        self.id = f"transcode_{int(time.time())}_{id(self)}"
        self.filename = Path(input_path).name

class MacTubeApp:
    """Application MacTube - YouTube Downloader pour macOS"""
    
    def __init__(self):
        # Configuration du th√®me
        setup_mactube_theme()
        
        # Configuration SSL pour macOS
        self.setup_ssl_for_macos()
        
        # Variables d'√©tat
        self.video_info = None
        self.download_path = str(Path.home() / "Downloads")
        self.is_downloading = False
        
        # Chemin FFmpeg (v√©rifi√© une seule fois au d√©marrage)
        self.ffmpeg_path = get_ffmpeg_path()
        if self.ffmpeg_path:
            print(f"‚úÖ FFmpeg trouv√©: {self.ffmpeg_path}")
        else:
            print("‚ö†Ô∏è FFmpeg non trouv√©, utilisation du syst√®me")
        
        # File d'attente des t√©l√©chargements
        self.download_queue = queue.Queue()
        self.download_threads = []
        self.active_tasks = {}  # Stocker {task_id: task} pour les t√¢ches actives
        self.max_concurrent_downloads = 2  # Nombre max de t√©l√©chargements simultan√©s
        self.queue_worker_running = False
        
        # Syst√®me anti-flickering (d√©bounce)
        self._queue_refresh_job = None
        
        # Cr√©ation de la fen√™tre principale
        self.setup_main_window()
        
        # Initialisation de l'historique (avant l'interface)
        self.history = MacTubeHistory()
        
        # Cr√©ation de l'interface
        self.create_interface()
        
        # Initialisation du module audio (apr√®s la cr√©ation de main_content)
        # Passer self pour permettre l'ajout √† la file d'attente
        self.audio_extractor = MacTubeAudioExtractor(self.main_content, app=self)
        
        # Configuration des √©v√©nements
        self.setup_bindings()
        
        # D√©marrer le gestionnaire de file d'attente
        self.start_queue_worker()
        
        print("‚úÖ MacTube - YouTube Downloader initialis√©")
    
    def setup_ssl_for_macos(self):
        """Configuration SSL sp√©cifique pour macOS"""
        try:
            import ssl
            import urllib3
            
            # D√©sactiver les avertissements SSL
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            
            # Configuration SSL pour yt-dlp
            ssl._create_default_https_context = ssl._create_unverified_context
            
            print("‚úÖ Configuration SSL appliqu√©e pour macOS")
        except Exception as e:
            print(f"‚ö†Ô∏è  Configuration SSL partielle: {e}")
    
    def setup_main_window(self):
        """Configure la fen√™tre principale"""
        self.root = ctk.CTk()
        self.root.title("MacTube - YouTube Downloader")
        
        # R√©solution optimis√©e pour macOS (dock + barre de menu)
        self.root.geometry("1200x800")
        self.root.resizable(True, True)   # Permettre le redimensionnement
        self.root.minsize(1000, 700)      # Taille minimale raisonnable
        
        # Configuration de la fen√™tre
        self.root.configure(fg_color=MacTubeTheme.get_color('bg_primary'))
        
        # Ic√¥ne de l'application (optionnel)
        try:
            icon_path = "mactube.icns"
            if os.path.exists(icon_path):
                self.root.iconbitmap(icon_path)
        except:
            pass
    
    def create_interface(self):
        """Cr√©e l'interface principale"""
        # Barre de navigation
        self.navigation = MacTubeNavigation(self.root)
        
        # Contenu principal
        self.main_content = ctk.CTkFrame(
            self.root,
            fg_color="transparent"
        )
        self.main_content.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Cr√©er les diff√©rents tabs
        self.create_download_tab()
        self.create_history_tab()
        self.create_queue_tab()
        self.create_transcoder_tab()
        self.create_settings_tab()
        
        # Afficher le tab de t√©l√©chargement par d√©faut
        self.show_tab("download")
    
    def create_download_tab(self):
        """Cr√©e le tab de t√©l√©chargement"""
        self.download_frame = ctk.CTkFrame(
            self.main_content,
            fg_color="transparent"
        )
        
        # Carte d'analyse
        self.analysis_card = MacTubeCard(
            self.download_frame,
            "üîç Analyse de vid√©o YouTube"
        )
        self.analysis_card.pack(fill="x", pady=(0, 20))
        
        # Champ URL
        url_frame = ctk.CTkFrame(self.analysis_card.content_frame, fg_color="transparent")
        url_frame.pack(fill="x", pady=(0, 10))
        
        MacTubeTheme.create_label_body(url_frame, "üîó URL YouTube :").pack(side="left")
        
        self.url_entry = MacTubeTheme.create_entry_modern(
            url_frame,
            "Collez l'URL de la vid√©o YouTube ici..."
        )
        self.url_entry.pack(side="left", fill="x", expand=True, padx=(10, 10))
        
        self.analyze_button = MacTubeTheme.create_button_primary(
            url_frame,
            "üîç Analyser",
            command=self.analyze_video,
            width=100
        )
        self.analyze_button.pack(side="right")
        
        # Zone d'information vid√©o
        info_frame = ctk.CTkFrame(self.analysis_card.content_frame, fg_color="transparent")
        info_frame.pack(fill="x", pady=(0, 10))
        
        # Miniature (√† gauche)
        self.thumbnail = MacTubeThumbnail(info_frame)
        self.thumbnail.pack(side="left", padx=(0, 20))
        
        # Informations vid√©o (√† droite)
        video_info_frame = ctk.CTkFrame(info_frame, fg_color="transparent")
        video_info_frame.pack(side="left", fill="both", expand=True)
        
        self.video_title = MacTubeTheme.create_label_title(
            video_info_frame,
            "Titre de la vid√©o"
        )
        self.video_title.pack(anchor="w", pady=(0, 10))
        
        self.video_duration = MacTubeTheme.create_label_body(
            video_info_frame,
            "‚è±Ô∏è Dur√©e: --:--"
        )
        self.video_duration.pack(anchor="w", pady=(0, 5))
        
        self.video_channel = MacTubeTheme.create_label_body(
            video_info_frame,
            "üì∫ Cha√Æne: --"
        )
        self.video_channel.pack(anchor="w")
        
        # Carte d'options
        self.options_card = MacTubeCard(
            self.download_frame,
            "‚öôÔ∏è Options de t√©l√©chargement"
        )
        self.options_card.pack(fill="x", pady=(0, 20))
        
        # Qualit√© vid√©o
        quality_frame = ctk.CTkFrame(self.options_card.content_frame, fg_color="transparent")
        quality_frame.pack(fill="x", pady=(0, 10))
        
        MacTubeTheme.create_label_body(quality_frame, "üé¨ Qualit√© vid√©o :").pack(side="left")
        
        self.quality_combo = ctk.CTkComboBox(
            quality_frame,
            values=["Analyser d'abord une vid√©o"],
            state="readonly",
            height=35,
            font=ctk.CTkFont(size=12),
            corner_radius=8,
            width=300
        )
        self.quality_combo.pack(side="right")
        
        # Nom du fichier
        filename_frame = ctk.CTkFrame(self.options_card.content_frame, fg_color="transparent")
        filename_frame.pack(fill="x", pady=(0, 10))
        
        MacTubeTheme.create_label_body(filename_frame, "üìù Nom du fichier :").pack(side="left")
        
        self.filename_entry = MacTubeTheme.create_entry_modern(
            filename_frame,
            "Nom personnalis√© (optionnel)"
        )
        self.filename_entry.pack(side="left", fill="x", expand=True, padx=(10, 10))
        
        # Format
        format_frame = ctk.CTkFrame(self.options_card.content_frame, fg_color="transparent")
        format_frame.pack(fill="x", pady=(0, 10))
        
        MacTubeTheme.create_label_body(format_frame, "üìÅ Format de sortie :").pack(side="left")
        
        self.format_combo = ctk.CTkComboBox(
            format_frame,
            values=[".mp4", ".mkv", ".avi", ".mov", ".webm"],
            state="readonly",
            height=35,
            font=ctk.CTkFont(size=12),
            corner_radius=8,
            width=300
        )
        self.format_combo.set(".mp4")
        self.format_combo.pack(side="right")
        
        # Dossier de destination
        path_frame = ctk.CTkFrame(self.options_card.content_frame, fg_color="transparent")
        path_frame.pack(fill="x", pady=(0, 10))
        
        MacTubeTheme.create_label_body(path_frame, "üìÇ Dossier de destination :").pack(side="left")
        
        self.path_entry = MacTubeTheme.create_entry_modern(
            path_frame,
            self.download_path
        )
        self.path_entry.pack(side="left", fill="x", expand=True, padx=(10, 10))
        
        self.browse_button = MacTubeTheme.create_button_primary(
            path_frame,
            "üìÅ Choisir...",
            command=self.browse_folder,
            width=100
        )
        self.browse_button.pack(side="right")
        
        # Bouton de t√©l√©chargement
        self.download_button = MacTubeTheme.create_button_primary(
            self.download_frame,
            "‚¨áÔ∏è T√©l√©charger",
            command=self.start_download
        )
        self.download_button.pack(pady=20)
        
        # Barre de progression (masqu√©e par d√©faut)
        self.progress_bar = MacTubeProgressBar(self.download_frame)
        self.progress_bar.pack(fill="x", pady=(0, 20))
        self.progress_bar.hide()  # Masquer par d√©faut
        
        # Label de statut
        self.status_label = MacTubeTheme.create_label_body(
            self.download_frame,
            "Analyse de Vid√©o"
        )
        self.status_label.pack()
    
    def create_history_tab(self):
        """Cr√©e le tab d'historique"""
        self.history_frame = ctk.CTkFrame(
            self.main_content,
            fg_color="transparent"
        )
        
        # Carte historique
        self.history_card = MacTubeCard(
            self.history_frame,
            "üìö Historique des t√©l√©chargements"
        )
        self.history_card.pack(fill="both", expand=True)
        
        # Liste des t√©l√©chargements
        self.history_list = ctk.CTkTextbox(
            self.history_card.content_frame,
            height=400,
            font=ctk.CTkFont(size=11),
            wrap="word"
        )
        self.history_list.pack(fill="both", expand=True, pady=(0, 10))
        
        # Boutons d'action
        buttons_frame = ctk.CTkFrame(self.history_card.content_frame, fg_color="transparent")
        buttons_frame.pack(fill="x")
        
        self.refresh_button = MacTubeTheme.create_button_primary(
            buttons_frame,
            "üîÑ Actualiser",
            command=self.refresh_history,
            width=120
        )
        self.refresh_button.pack(side="left", padx=(0, 10))
        
        self.clear_button = MacTubeTheme.create_button_primary(
            buttons_frame,
            "üóëÔ∏è Effacer",
            command=self.clear_history,
            width=120
        )
        self.clear_button.pack(side="left")
        
        # Charger l'historique initial
        self.refresh_history()
    
    def create_queue_tab(self):
        """Cr√©e le tab de la file d'attente"""
        self.queue_frame = ctk.CTkFrame(
            self.main_content,
            fg_color="transparent"
        )
        
        # Carte file d'attente
        self.queue_card = MacTubeCard(
            self.queue_frame,
            "üìã File d'attente des t√©l√©chargements"
        )
        self.queue_card.pack(fill="both", expand=True)
        
        # Informations de la file
        info_frame = ctk.CTkFrame(self.queue_card.content_frame, fg_color="transparent")
        info_frame.pack(fill="x", pady=(0, 10))
        
        self.queue_info_label = MacTubeTheme.create_label_body(
            info_frame,
            "üìä T√©l√©chargements en cours: 0 | En attente: 0"
        )
        self.queue_info_label.pack(side="left")
        
        # Liste des t√¢ches
        self.queue_list_frame = ctk.CTkFrame(self.queue_card.content_frame, fg_color="transparent")
        self.queue_list_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        # Zone de liste avec grille globale pour un alignement parfait
        self.queue_list_container = ctk.CTkFrame(self.queue_list_frame, fg_color="transparent")
        self.queue_list_container.pack(fill="both", expand=True)
        
        # Configuration de la grille globale avec largeurs fixes
        self.queue_list_container.grid_columnconfigure(0, weight=0, minsize=200)  # T√¢che
        self.queue_list_container.grid_columnconfigure(1, weight=0, minsize=150)  # Progression
        self.queue_list_container.grid_columnconfigure(2, weight=0, minsize=80)   # Vitesse
        self.queue_list_container.grid_columnconfigure(3, weight=0, minsize=80)   # Temps
        self.queue_list_container.grid_columnconfigure(4, weight=0, minsize=100)  # Statut
        self.queue_list_container.grid_columnconfigure(5, weight=0, minsize=100)  # Fichier
        
        # En-t√™tes dans la grille globale (ligne 0)
        task_header = MacTubeTheme.create_label_body(self.queue_list_container, "T√¢che")
        task_header.grid(row=0, column=0, sticky="w", padx=5, pady=5)
        
        progress_header = MacTubeTheme.create_label_body(self.queue_list_container, "Progression")
        progress_header.grid(row=0, column=1, sticky="w", padx=5, pady=5)
        
        speed_header = MacTubeTheme.create_label_body(self.queue_list_container, "Vitesse")
        speed_header.grid(row=0, column=2, sticky="w", padx=5, pady=5)
        
        time_header = MacTubeTheme.create_label_body(self.queue_list_container, "Temps")
        time_header.grid(row=0, column=3, sticky="w", padx=5, pady=5)
        
        status_header = MacTubeTheme.create_label_body(self.queue_list_container, "Statut")
        status_header.grid(row=0, column=4, sticky="w", padx=5, pady=5)
        
        file_header = MacTubeTheme.create_label_body(self.queue_list_container, "Fichier")
        file_header.grid(row=0, column=5, sticky="w", padx=5, pady=5)
        
        # S√©parateur visuel
        separator = ctk.CTkFrame(self.queue_list_container, height=2, fg_color="gray")
        separator.grid(row=1, column=0, columnspan=6, sticky="ew", pady=5)
        
        # Compteur de lignes pour la grille
        self.queue_row_counter = 2
        
        # Boutons d'action
        buttons_frame = ctk.CTkFrame(self.queue_card.content_frame, fg_color="transparent")
        buttons_frame.pack(fill="x")
        
        self.refresh_queue_button = MacTubeTheme.create_button_primary(
            buttons_frame,
            "üîÑ Actualiser",
            command=self.schedule_queue_refresh,
            width=120
        )
        self.refresh_queue_button.pack(side="left", padx=(0, 10))
        
        self.pause_queue_button = MacTubeTheme.create_button_secondary(
            buttons_frame,
            "‚è∏Ô∏è Pause",
            command=self.pause_queue,
            width=120
        )
        self.pause_queue_button.pack(side="left", padx=(0, 10))
        
        self.resume_queue_button = MacTubeTheme.create_button_success(
            buttons_frame,
            "‚ñ∂Ô∏è Reprendre",
            command=self.resume_queue,
            width=120
        )
        self.resume_queue_button.pack(side="left")
        
        # Initialiser la liste
        self.schedule_queue_refresh(0)
    
    def create_transcoder_tab(self):
        """Cr√©e le tab du transcodeur"""
        # Cr√©er l'instance du transcodeur
        self.transcoder = MacTubeTranscoder(self.main_content, self)
    
    def create_settings_tab(self):
        """Cr√©e le tab des param√®tres"""
        self.settings_frame = ctk.CTkFrame(
            self.main_content,
            fg_color="transparent"
        )
        
        # Carte de param√®tres
        self.settings_card = MacTubeCard(
            self.settings_frame,
            "‚öôÔ∏è Param√®tres MacTube"
        )
        self.settings_card.pack(fill="both", expand=True)
        
        # Th√®me
        theme_frame = ctk.CTkFrame(self.settings_card.content_frame, fg_color="transparent")
        theme_frame.pack(fill="x", pady=(0, 10))
        
        MacTubeTheme.create_label_body(theme_frame, "üé® Th√®me :").pack(side="left")
        
        self.theme_combo = ctk.CTkComboBox(
            theme_frame,
            values=["Syst√®me", "Clair", "Sombre"],
            state="readonly",
            height=35,
            font=ctk.CTkFont(size=12),
            corner_radius=8,
            width=200,
            command=self.change_theme
        )
        self.theme_combo.set("Syst√®me")
        self.theme_combo.pack(side="right")
        
        # Autres param√®tres
        MacTubeTheme.create_label_section(
            self.settings_card.content_frame,
            "üîß Param√®tres avanc√©s"
        ).pack(pady=(20, 10), anchor="w")
        
        # SSL
        self.ssl_checkbox = ctk.CTkCheckBox(
            self.settings_card.content_frame,
            text="Ignorer les erreurs SSL (recommand√© pour macOS)",
            font=ctk.CTkFont(size=12)
        )
        self.ssl_checkbox.pack(pady=(0, 10), anchor="w")
        self.ssl_checkbox.select()
        
        # Retry
        self.retry_checkbox = ctk.CTkCheckBox(
            self.settings_card.content_frame,
            text="Retry automatique en cas d'√©chec",
            font=ctk.CTkFont(size=12)
        )
        self.retry_checkbox.pack(pady=(0, 10), anchor="w")
        self.retry_checkbox.select()
        
        # File d'attente
        MacTubeTheme.create_label_section(
            self.settings_card.content_frame,
            "üìã Gestion de la file d'attente"
        ).pack(pady=(20, 10), anchor="w")
        
        # Nombre max de t√©l√©chargements simultan√©s
        max_downloads_frame = ctk.CTkFrame(self.settings_card.content_frame, fg_color="transparent")
        max_downloads_frame.pack(fill="x", pady=(0, 10))
        
        MacTubeTheme.create_label_body(max_downloads_frame, "üîÑ T√©l√©chargements simultan√©s :").pack(side="left")
        
        self.max_downloads_slider = ctk.CTkSlider(
            max_downloads_frame,
            from_=1,
            to=5,
            number_of_steps=4,
            command=self.update_max_downloads
        )
        self.max_downloads_slider.pack(side="left", fill="x", expand=True, padx=(10, 10))
        self.max_downloads_slider.set(self.max_concurrent_downloads)
        
        self.max_downloads_label = MacTubeTheme.create_label_body(
            max_downloads_frame,
            f"{self.max_concurrent_downloads}"
        )
        self.max_downloads_label.pack(side="right")
        
        # Bouton pour vider la file d'attente
        self.clear_queue_button = MacTubeTheme.create_button_secondary(
            self.settings_card.content_frame,
            "üóëÔ∏è Vider la file d'attente",
            command=self.clear_download_queue,
            width=200
        )
        self.clear_queue_button.pack(pady=(0, 10), anchor="w")
    
    def update_max_downloads(self, value):
        """Met √† jour le nombre max de t√©l√©chargements simultan√©s"""
        self.max_concurrent_downloads = int(value)
        self.max_downloads_label.configure(text=f"{self.max_concurrent_downloads}")
        print(f"‚úÖ Nombre max de t√©l√©chargements mis √† jour: {self.max_concurrent_downloads}")
    
    def clear_download_queue(self):
        """Vide la file d'attente des t√©l√©chargements"""
        if messagebox.askyesno("Confirmation", "Voulez-vous vraiment vider la file d'attente ?"):
            # Vider la file
            while not self.download_queue.empty():
                try:
                    self.download_queue.get_nowait()
                    self.download_queue.task_done()
                except queue.Empty:
                    break
            
            # Arr√™ter les t√©l√©chargements en cours
            for thread in self.download_threads:
                if thread.is_alive():
                    # Note: On ne peut pas forcer l'arr√™t d'un thread, mais on peut marquer les t√¢ches
                    pass
            
            self.download_threads = []
            messagebox.showinfo("Succ√®s", "File d'attente vid√©e avec succ√®s!")
            print("‚úÖ File d'attente vid√©e")
    
    def show_tab(self, tab_name):
        """Affiche un tab sp√©cifique"""
        # Masquer tous les tabs
        self.download_frame.pack_forget()
        if hasattr(self, 'audio_extractor'):
            self.audio_extractor.hide()
        if hasattr(self, 'transcoder'):
            self.transcoder.hide()
        self.history_frame.pack_forget()
        self.queue_frame.pack_forget()
        self.settings_frame.pack_forget()
        
        # Afficher le tab s√©lectionn√©
        if tab_name == "download":
            self.download_frame.pack(fill="both", expand=True)
        elif tab_name == "audio" and hasattr(self, 'audio_extractor'):
            self.audio_extractor.pack(fill="both", expand=True)
        elif tab_name == "transcoder":
            if hasattr(self, 'transcoder'):
                self.transcoder.pack(fill="both", expand=True)
        elif tab_name == "history":
            self.history_frame.pack(fill="both", expand=True)
        elif tab_name == "queue":
            self.queue_frame.pack(fill="both", expand=True)
        elif tab_name == "settings":
            self.settings_frame.pack(fill="both", expand=True)
    
    def setup_bindings(self):
        """Configure les bindings"""
        # Changement de tab
        self.root.bind("<<TabChanged>>", self.on_tab_changed)
        
        # Raccourci Cmd+V pour coller
        self.root.bind('<Command-v>', self.paste_url)
        
        # Entr√©e pour analyser
        self.url_entry.bind('<Return>', lambda e: self.analyze_video())
        
        # Menu contextuel pour le clic droit
        self.create_context_menu()
        
        # Bindings pour le menu contextuel - Gestion multi-OS
        self.url_entry.bind('<Button-3>', self.show_context_menu)  # Clic droit standard (Windows/Linux)
        self.url_entry.bind('<Control-Button-1>', self.show_context_menu)  # Clic droit macOS (Cmd+Clic)
        self.url_entry.bind('<Button-2>', self.show_context_menu)  # Clic droit macOS alternatif
        
        # Binding sp√©cifique pour macOS
        if hasattr(self, 'root') and hasattr(self.root, 'tk') and self.root.tk.call('tk', 'windowingsystem') == 'aqua':
            print("üîß D√©tection macOS - Configuration des bindings sp√©cifiques")
            self.url_entry.bind('<Button-2>', self.show_context_menu)
            self.url_entry.bind('<Control-Button-1>', self.show_context_menu)
        
        # Binding de fermeture avec nettoyage automatique de l'historique
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # Focus automatique sur le champ URL
        self.url_entry.focus()
    
    def start_queue_worker(self):
        """D√©marre le gestionnaire de file d'attente"""
        self.queue_worker_running = True
        threading.Thread(target=self._queue_worker, daemon=True).start()
        print("‚úÖ Gestionnaire de file d'attente d√©marr√©")
    
    def _queue_worker(self):
        """Gestionnaire principal de la file d'attente"""
        while self.queue_worker_running:
            try:
                # Attendre une t√¢che
                task = self.download_queue.get(timeout=1)
                
                # V√©rifier le nombre de t√©l√©chargements actifs
                active_downloads = len([t for t in self.download_threads if t.is_alive()])
                
                if active_downloads < self.max_concurrent_downloads:
                    print(f"üöÄ Lancement du t√©l√©chargement: {task.id}")
                    
                    # Stocker la t√¢che comme active
                    self.active_tasks[task.id] = task
                    
                    # Lancer le t√©l√©chargement ou le transcodage selon le type de t√¢che
                    if hasattr(task, 'url'):  # T√¢che de t√©l√©chargement
                        handler = self._download_task_thread if getattr(task, 'task_type', 'video') == 'video' else self._download_audio_task_thread
                        download_thread = threading.Thread(target=handler, args=(task,), daemon=True)
                        download_thread.start()
                        self.download_threads.append(download_thread)
                    else:  # T√¢che de transcodage
                        handler = self._transcode_task_thread
                        transcode_thread = threading.Thread(target=handler, args=(task,), daemon=True)
                        transcode_thread.start()
                        self.download_threads.append(transcode_thread)
                    
                    # Nettoyer les threads termin√©s
                    self.download_threads = [t for t in self.download_threads if t.is_alive()]
                    
                    # Marquer la t√¢che comme trait√©e seulement apr√®s le lancement
                    self.download_queue.task_done()
                else:
                    print(f"‚è≥ T√©l√©chargement en attente (limite atteinte): {task.id}")
                    # Remettre la t√¢che en file d'attente
                    self.download_queue.put(task)
                    time.sleep(2)  # Attendre un peu
                
            except queue.Empty:
                continue
            except Exception as e:
                print(f"‚ùå Erreur dans le gestionnaire de file d'attente: {e}")
                # En cas d'erreur, marquer la t√¢che comme trait√©e pour √©viter le blocage
                try:
                    self.download_queue.task_done()
                except:
                    pass
    
    def add_to_queue(self, url, quality, output_format, filename, download_path, task_type="video", silent: bool = False):
        """Ajoute une t√¢che √† la file d'attente
        
        silent: si True, n'affiche pas de pop-up de confirmation (utilis√© par le bulk)
        """
        task = DownloadTask(url, quality, output_format, filename, download_path, task_type)
        self.download_queue.put(task)
        
        # Mettre √† jour l'interface
        self.root.after(0, self._update_queue_display)
        
        # Programmer des mises √† jour r√©guli√®res de la file d'attente
        self._schedule_queue_updates()
        
        print(f"‚úÖ T√¢che ajout√©e √† la file d'attente: {task.id}")
        
        # Afficher une pop-up de confirmation sauf en mode silencieux
        if not silent:
            self._show_queue_confirmation(task, task_type)
        
        return task
    
    def add_transcode_to_queue(self, input_path, output_format, quality, output_path, task_type, download_path, silent: bool = False):
        """Ajoute une t√¢che de transcodage √† la file d'attente"""
        task = TranscodeTask(input_path, output_format, quality, output_path, task_type, download_path)
        self.download_queue.put(task)
        
        # Mettre √† jour l'interface
        self.root.after(0, self._update_queue_display)
        
        # Programmer des mises √† jour r√©guli√®res de la file d'attente
        self._schedule_queue_updates()
        
        print(f"‚úÖ T√¢che de transcodage ajout√©e √† la file d'attente: {task.id}")
        
        # Afficher une pop-up de confirmation sauf en mode silencieux
        if not silent:
            self._show_transcode_confirmation(task, task_type)
        
        return task
    
    def _show_queue_confirmation(self, task, task_type):
        """Affiche une pop-up de confirmation pour l'ajout √† la file d'attente"""
        # Utiliser le vrai titre de la vid√©o au lieu du placeholder %(title)s
        display_filename = task.video_title if hasattr(task, 'video_title') and task.video_title else task.filename
        
        if task_type == "audio":
            # Pop-up pour l'extraction audio
            messagebox.showinfo(
                "Extraction audio ajout√©e", 
                f"üéµ Extraction audio ajout√©e √† la file d'attente!\n\n"
                f"URL: {task.url}\n"
                f"Qualit√©: {task.quality}\n"
                f"Format: {task.output_format}\n"
                f"Fichier: {display_filename}\n"
                f"Dossier: {task.download_path}"
            )
        else:
            # Pop-up pour le t√©l√©chargement vid√©o
            messagebox.showinfo(
                "T√©l√©chargement ajout√©", 
                f"üì• T√©l√©chargement ajout√© √† la file d'attente!\n\n"
                f"URL: {task.url}\n"
                f"Qualit√©: {task.quality}\n"
                f"Format: {task.output_format}\n"
                f"Fichier: {display_filename}\n"
                f"Dossier: {task.download_path}"
            )
    
    def _schedule_queue_updates(self):
        """Programme des mises √† jour r√©guli√®res de la file d'attente"""
        if hasattr(self, 'queue_frame'):
            # Mettre √† jour toutes les 2 secondes
            self.root.after(2000, self.schedule_queue_refresh)
            # Programmer la prochaine mise √† jour
            self.root.after(2000, self._schedule_queue_updates)
    
    def _update_queue_display(self):
        """Met √† jour l'affichage de la file d'attente"""
        if hasattr(self, 'queue_frame'):
            # Mettre √† jour la liste des t√¢ches
            self.schedule_queue_refresh()
    
    def _download_task_thread(self, task):
        """Thread pour t√©l√©charger une t√¢che de la file d'attente"""
        try:
            print(f"üì• D√©but du t√©l√©chargement: {task.id} - {task.url}")
            task.status = "T√©l√©chargement en cours..."
            self.root.after(0, lambda: self._update_task_status(task))
            
            # Configuration yt-dlp pour cette t√¢che
            format_selector = self._get_format_selector(task.quality)
            # Nom de sortie sans ID (pr√©serve le titre complet)
            output_template = os.path.join(task.download_path, f"%(title)s.%(ext)s")
            
            print(f"üîß Configuration yt-dlp:")
            print(f"   Format: {format_selector}")
            print(f"   Sortie: {output_template}")
            print(f"   Format final: {task.output_format.lstrip('.')}")
            
            # Utiliser le chemin FFmpeg stock√© au d√©marrage
            ffmpeg_path = self.ffmpeg_path
            if not ffmpeg_path:
                raise Exception("FFmpeg non trouv√© dans le projet")
            
            ydl_opts = {
                'format': format_selector,
                'outtmpl': output_template,
                'merge_output_format': task.output_format.lstrip('.'),
                'progress_hooks': [lambda d: self._task_progress_hook(d, task)],
                'verbose': True,  # Plus de debug
                'ffmpeg_location': ffmpeg_path,  # Utiliser FFmpeg du projet
            }
            
            # Lancer le t√©l√©chargement
            print(f"üöÄ Lancement de yt-dlp...")
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                result = ydl.download([task.url])
            
            print(f"üìä R√©sultat yt-dlp: {result}")
            
            # Marquer comme termin√©
            task.status = "Termin√© ‚úÖ"
            task.progress = 100
            
            # Retirer de la liste des t√¢ches actives
            if task.id in self.active_tasks:
                del self.active_tasks[task.id]
            
            self.root.after(0, lambda: self._update_task_status(task))
            
            # Ajouter √† l'historique
            self.history.add_download(
                task.filename, task.url, task.download_path, 
                task.output_format, task.quality
            )
            
            print(f"‚úÖ T√©l√©chargement termin√© avec succ√®s: {task.id}")
            
        except Exception as e:
            print(f"‚ùå Erreur de t√©l√©chargement: {task.id} - {e}")
            import traceback
            traceback.print_exc()
            
            task.status = f"Erreur: {str(e)}"
            self.root.after(0, lambda: self._update_task_status(task))

    def _download_audio_task_thread(self, task):
        """Thread pour extraire l'audio en file d'attente avec gestion d'erreur am√©lior√©e"""
        try:
            print(f"üéµ D√©but extraction audio: {task.id} - {task.url}")
            task.status = "Extraction en cours..."
            self.root.after(0, lambda: self._update_task_status(task))

            # Nettoyer l'URL
            clean_url = self.clean_youtube_url(task.url)

            # Utiliser le chemin FFmpeg stock√© au d√©marrage
            ffmpeg_path = self.ffmpeg_path
            if not ffmpeg_path:
                raise Exception("FFmpeg non trouv√© dans le projet")

            # S√©lection du format audio avec fallback multiple
            def audio_selector_from_quality(quality: str) -> str:
                if '128' in quality:
                    return "bestaudio[abr<=128]/bestaudio[abr<=192]/bestaudio/best"
                if '192' in quality:
                    return "bestaudio[abr<=192]/bestaudio/best"
                if '320' in quality:
                    return "bestaudio[abr<=320]/bestaudio[abr<=192]/bestaudio/best"
                return "bestaudio/best"

            format_selector = audio_selector_from_quality(task.quality)

            # Chemin de sortie mod√®le sans ID (pr√©serve le titre)
            output_template = os.path.join(task.download_path, f"%(title)s.%(ext)s")

            # Post-processeur FFmpeg pour forcer le codec final
            ydl_opts = {
                'format': format_selector,
                'outtmpl': output_template,
                'quiet': False,  # Activer les logs pour debug
                'no_warnings': False,  # Voir les avertissements
                # Garder les caract√®res usuels du titre (macOS supporte la plupart)
                'trim_file_name': 180,
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    # Mapper ".ogg" vers le codec FFmpeg 
                    'preferredcodec': ('vorbis' if task.output_format.lstrip('.') == 'ogg' else task.output_format.lstrip('.')),
                    'preferredquality': '192',
                }],
                'progress_hooks': [lambda d: self._task_progress_hook(d, task)],
                'ffmpeg_location': ffmpeg_path,
                # Ajouter des options de compatibilit√©
                'extractaudio': True,
                'audioformat': task.output_format.lstrip('.'),
                'audioquality': '0',  # Meilleure qualit√© disponible
            }

            print(f"üîß Audio yt-dlp: format={format_selector}, codec={task.output_format}")

            # Essayer d'abord avec le format demand√©
            try:
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    result = ydl.download([clean_url])
                
                if result == 0:
                    print(f"‚úÖ Extraction audio r√©ussie avec le format demand√©")
                else:
                    raise Exception(f"yt-dlp a retourn√© le code {result}")

            except yt_dlp.utils.DownloadError as e:
                print(f"‚ö†Ô∏è  Format demand√© non disponible, essai avec fallback: {e}")
                
                # Lister les formats disponibles pour debug
                try:
                    with yt_dlp.YoutubeDL({'quiet': True}) as ydl:
                        info = ydl.extract_info(clean_url, download=False)
                        if 'formats' in info:
                            audio_formats = [f for f in info['formats'] if f.get('acodec') != 'none']
                            print(f"üîç Formats audio disponibles: {len(audio_formats)}")
                            for fmt in audio_formats[:5]:  # Afficher les 5 premiers
                                print(f"   - {fmt.get('format_id', 'N/A')}: {fmt.get('acodec', 'N/A')} "
                                      f"({fmt.get('abr', 'N/A')} kbps)")
                except Exception as debug_e:
                    print(f"‚ö†Ô∏è  Impossible de lister les formats: {debug_e}")
                
                # Essayer avec un format plus g√©n√©rique
                ydl_opts['format'] = "bestaudio/best"
                ydl_opts['postprocessors'] = [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',  # Fallback sur MP3
                    'preferredquality': '192',
                }]
                
                print(f"üîÑ Essai avec format fallback: {ydl_opts['format']}")
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    result = ydl.download([clean_url])
                
                if result != 0:
                    raise Exception(f"Fallback √©chou√© avec le code {result}")

            task.status = "Termin√© ‚úÖ"
            task.progress = 100
            if task.id in self.active_tasks:
                del self.active_tasks[task.id]
            self.root.after(0, lambda: self._update_task_status(task))

            # Historique
            self.history.add_download(
                task.filename, task.url, task.download_path,
                task.output_format, task.quality
            )

            print(f"‚úÖ Extraction audio termin√©e: {task.id}")

        except yt_dlp.utils.DownloadError as e:
            print(f"‚ùå Erreur de t√©l√©chargement yt-dlp: {e}")
            task.status = f"Erreur format: {str(e)}"
            self.root.after(0, lambda: self._update_task_status(task))
        except Exception as e:
            print(f"‚ùå Erreur inattendue lors de l'extraction audio: {task.id} - {e}")
            import traceback
            traceback.print_exc()
            task.status = f"Erreur: {str(e)}"
            self.root.after(0, lambda: self._update_task_status(task))
    
    def _task_progress_hook(self, d, task):
        """Hook de progression pour une t√¢che"""
        if d['status'] == 'downloading':
            # Mettre √† jour la progression
            if 'total_bytes' in d and d['total_bytes']:
                task.progress = (d['downloaded_bytes'] / d['total_bytes']) * 100
            elif 'total_bytes_estimate' in d and d['total_bytes_estimate']:
                task.progress = (d['downloaded_bytes'] / d['total_bytes_estimate']) * 100
            
            # Mettre √† jour la vitesse
            if 'speed' in d and d['speed']:
                task.speed = f"{d['speed'] / (1024*1024):.1f} MB/s"
    
    def _show_transcode_confirmation(self, task, task_type):
        """Affiche une pop-up de confirmation pour l'ajout d'une t√¢che de transcodage"""
        task_names = {
            "video_conversion": "Conversion Vid√©o",
            "audio_extraction": "Extraction Audio",
            "audio_conversion": "Conversion Audio"
        }
        
        task_name = task_names.get(task_type, "Transcodage")
        
        messagebox.showinfo(
            f"{task_name} ajout√©e", 
            f"üîÑ {task_name} ajout√©e √† la file d'attente!\n\n"
            f"Fichier source: {task.filename}\n"
            f"Format de sortie: {task.output_format}\n"
            f"Qualit√©: {task.quality}\n"
            f"Fichier de sortie: {Path(task.output_path).name}\n"
            f"Dossier: {task.download_path}"
        )
    
    def _update_task_status(self, task):
        """Met √† jour le statut d'une t√¢che dans l'interface"""
        if hasattr(self, 'queue_frame'):
            self.schedule_queue_refresh()
    
    def _get_format_selector(self, quality):
        """Retourne le s√©lecteur de format yt-dlp pour une qualit√© donn√©e"""
        # Extraire la hauteur de la qualit√© s√©lectionn√©e
        import re
        
        # Patterns pour extraire la r√©solution
        patterns = [
            r'(\d+)p',  # 1080p, 720p, etc.
            r'(\d+)x\d+',  # 1920x1080, etc.
            r'(\d+)',  # 1080, 720, etc.
        ]
        
        height = None
        for pattern in patterns:
            match = re.search(pattern, quality)
            if match:
                height = int(match.group(1))
                break
        
        if height:
            # Cr√©er un s√©lecteur sp√©cifique pour cette hauteur
            if height >= 2160:
                return f"bestvideo[height<={height}]+bestaudio"
            elif height >= 1080:
                return f"bestvideo[height<={height}]+bestaudio"
            elif height >= 720:
                return f"bestvideo[height<={height}]+bestaudio"
            elif height >= 480:
                return f"bestvideo[height<={height}]+bestaudio"
            else:
                return f"bestvideo[height<={height}]+bestaudio"
        
        # Fallback pour les qualit√©s non reconnues
        if '4K' in quality or '2160' in quality:
            return "bestvideo[height<=2160]+bestaudio"
        elif 'Ultra HD' in quality or '1620' in quality:
            return "bestvideo[height<=1620]+bestaudio"
        elif '1440p' in quality or 'QHD' in quality:
            return "bestvideo[height<=1440]+bestaudio"
        elif 'Full HD' in quality or '1080' in quality:
            return "bestvideo[height<=1080]+bestaudio"
        elif 'HD+' in quality or '810' in quality:
            return "bestvideo[height<=810]+bestaudio"
        elif 'HD' in quality and '720' in quality:
            return "bestvideo[height<=720]+bestaudio"
        elif 'HD' in quality and '540' in quality:
            return "bestvideo[height<=540]+bestaudio"
        elif 'SD' in quality and '480' in quality:
            return "bestvideo[height<=480]+bestaudio"
        elif 'SD' in quality and '360' in quality:
            return "bestvideo[height<=360]+bestaudio"
        elif 'SD' in quality and '270' in quality:
            return "bestvideo[height<=270]+bestaudio"
        elif 'Audio' in quality:
            return "bestaudio"
        else:
            # Par d√©faut, utiliser la meilleure qualit√© disponible
            return "bestvideo+bestaudio"
    
    def _transcode_task_thread(self, task):
        """Thread pour traiter une t√¢che de transcodage"""
        try:
            print(f"üîÑ D√©but du transcodage: {task.id} - {task.filename}")
            task.status = "Transcodage en cours..."
            self.root.after(0, lambda: self._update_task_status(task))
            
            # D√©l√©guer l'ex√©cution au transcodeur
            if hasattr(self, 'transcoder'):
                self.transcoder.execute_transcode_task(task)
            else:
                raise Exception("Module transcodeur non disponible")
            
            # Marquer comme termin√©
            task.status = "Termin√© ‚úÖ"
            task.progress = 100
            
            # Retirer de la liste des t√¢ches actives
            if task.id in self.active_tasks:
                del self.active_tasks[task.id]
            
            self.root.after(0, lambda: self._update_task_status(task))
            
            print(f"‚úÖ Transcodage termin√© avec succ√®s: {task.id}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du transcodage: {e}")
            task.status = f"Erreur: {str(e)}"
            task.progress = 0
            
            # Retirer de la liste des t√¢ches actives
            if task.id in self.active_tasks:
                del self.active_tasks[task.id]
            
            self.root.after(0, lambda: self._update_task_status(task))
    

    

    

    

    
    def _refresh_queue_list(self):
        """Met √† jour la liste des t√¢ches de la file d'attente avec alignement parfait"""
        if hasattr(self, 'queue_frame'):
            # Compter les t√¢ches
            active_downloads = len(self.active_tasks)
            try:
                waiting_tasks = list(self.download_queue.queue)
            except Exception:
                waiting_tasks = []
            queue_size = len(waiting_tasks)
            
            # Mettre √† jour le label d'information
            self.queue_info_label.configure(
                text=f"üìä T√©l√©chargements en cours: {active_downloads} | En attente: {queue_size}"
            )
            
            # Nettoyer la liste existante (garder les en-t√™tes)
            widgets_to_remove = []
            for widget in self.queue_list_container.winfo_children():
                if widget.grid_info()['row'] >= 2:  # Garder en-t√™tes et s√©parateur
                    widgets_to_remove.append(widget)
            
            for widget in widgets_to_remove:
                widget.destroy()
            
            # R√©initialiser le compteur de lignes
            self.queue_row_counter = 2
            
            # Cr√©er les lignes pour les t√¢ches actives
            for task_id, task in self.active_tasks.items():
                title = self._get_task_title(task)
                self._create_download_row(
                    title=title,
                    status=task.status,
                    progress=task.progress,
                    speed=task.speed,
                    eta=task.eta,
                    state="active",
                    file_display=self._get_file_display(task)
                )
            
            # Cr√©er les lignes pour les t√¢ches en attente
            for task in waiting_tasks:
                title = self._get_task_title(task)
                self._create_download_row(
                    title=title,
                    status="En attente",
                    progress=0,
                    speed="0 MB/s",
                    eta="En attente",
                    state="waiting",
                    file_display=self._get_file_display(task)
                )
    
    def schedule_queue_refresh(self, delay_ms: int = 120):
        """Planifie un rafra√Æchissement de la file d'attente avec d√©bounce anti-flickering"""
        if hasattr(self, 'root') and self._queue_refresh_job:
            self.root.after_cancel(self._queue_refresh_job)
        if hasattr(self, 'root'):
            self._queue_refresh_job = self.root.after(delay_ms, self._refresh_queue_list)
    
    def _show_empty_state(self):
        """Affiche l'√©tat vide de la file d'attente"""
        # Nettoyer les anciennes lignes
        widgets_to_remove = []
        for widget in self.queue_list_container.winfo_children():
            if widget.grid_info()['row'] >= 2:  # Garder en-t√™tes et s√©parateur
                widgets_to_remove.append(widget)
        
        for widget in widgets_to_remove:
            widget.destroy()
        
        # Afficher le message d'√©tat vide
        empty_label = MacTubeTheme.create_label_body(
            self.queue_list_container,
            "üìã Aucune t√¢che dans la file d'attente"
        )
        empty_label.grid(row=2, column=0, columnspan=6, pady=20)
    

    
    def _get_task_title(self, task):
        """G√©n√®re le titre d'affichage pour une t√¢che"""
        # G√©rer les t√¢ches de transcodage
        if hasattr(task, 'filename'):  # TranscodeTask
            task_names = {
                "video_conversion": "Conversion Vid√©o",
                "audio_extraction": "Extraction Audio",
                "audio_conversion": "Conversion Audio"
            }
            task_name = task_names.get(task.task_type, "Transcodage")
            return self._truncate_text(f"{task_name}: {task.filename}", 42)
        
        # G√©rer les t√¢ches de t√©l√©chargement
        return self._truncate_text(task.video_title, 42)
    
    def _get_file_display(self, task):
        """G√©n√®re l'affichage du nom de fichier pour une t√¢che"""
        # G√©rer les t√¢ches de transcodage
        if hasattr(task, 'filename'):  # TranscodeTask
            return self._truncate_text(task.filename, 28)
        
        # G√©rer les t√¢ches de t√©l√©chargement
        if getattr(task, 'task_type', 'video') == 'audio':
            ext = (task.output_format or 'mp3').lstrip('.')
        else:
            ext = 'mp4'
        return self._truncate_text(f"{task.video_title}.{ext}", 28)
    

    
    def _create_download_row(self, title, status, progress, speed, eta, state, file_display=None):
        """Cr√©e une ligne d'affichage pour un t√©l√©chargement avec alignement parfait"""
        # Utiliser la grille globale du conteneur principal
        current_row = self.queue_row_counter
        
        # Titre de la t√¢che (colonne 0) - align√© √† gauche
        title_label = MacTubeTheme.create_label_body(self.queue_list_container, title)
        title_label.grid(row=current_row, column=0, sticky="w", padx=5, pady=2)
        
        # Barre de progression (colonne 1) - centr√©e
        progress_frame = ctk.CTkFrame(self.queue_list_container, fg_color="transparent")
        progress_frame.grid(row=current_row, column=1, sticky="ew", padx=5, pady=2)
        progress_frame.grid_columnconfigure(0, weight=1)
        
        progress_bar = ctk.CTkProgressBar(progress_frame, width=120, height=12)
        progress_bar.grid(row=0, column=0, pady=2)
        progress_bar.set(progress / 100)
        
        # Couleur de la barre selon le statut
        if state == "active":
            progress_bar.configure(progress_color="green")
        elif state == "waiting":
            progress_bar.configure(progress_color="orange")
        else:
            progress_bar.configure(progress_color="blue")
        
        progress_label = MacTubeTheme.create_label_body(progress_frame, f"{progress:.1f}%")
        progress_label.grid(row=1, column=0, pady=2)
        
        # Vitesse (colonne 2) - centr√©e
        speed_label = MacTubeTheme.create_label_body(self.queue_list_container, speed)
        speed_label.grid(row=current_row, column=2, sticky="ew", padx=5, pady=2)
        
        # Temps restant (colonne 3) - centr√©
        eta_label = MacTubeTheme.create_label_body(self.queue_list_container, eta)
        eta_label.grid(row=current_row, column=3, sticky="ew", padx=5, pady=2)
        
        # Statut (colonne 4) - centr√©
        status_color = "green" if state == "active" else "orange" if state == "waiting" else "red"
        status_label = MacTubeTheme.create_label_body(self.queue_list_container, status)
        status_label.grid(row=current_row, column=4, sticky="ew", padx=5, pady=2)
        
        # Fichier (colonne 5) - affiche le nom de fichier tronqu√© + bouton
        file_frame = ctk.CTkFrame(self.queue_list_container, fg_color="transparent")
        file_frame.grid(row=current_row, column=5, sticky="ew", padx=5, pady=2)
        file_frame.grid_columnconfigure(0, weight=1)
        file_label = MacTubeTheme.create_label_body(file_frame, file_display or self._truncate_text(title, 28))
        file_label.grid(row=0, column=0, sticky="w")
        
        if state == "active":
            pause_btn = MacTubeTheme.create_button_secondary(
                file_frame, "‚è∏Ô∏è", command=lambda: self._pause_download(title), width=30
            )
            pause_btn.grid(row=0, column=1, padx=4)
        elif state == "waiting":
            remove_btn = MacTubeTheme.create_button_secondary(
                file_frame, "‚ùå", command=lambda: self._remove_from_queue(title), width=30
            )
            remove_btn.grid(row=0, column=1, padx=4)
        
        # Incr√©menter le compteur de lignes
        self.queue_row_counter += 1
    
    def _pause_download(self, title):
        """Met en pause un t√©l√©chargement sp√©cifique"""
        messagebox.showinfo("Pause", f"Pause du t√©l√©chargement: {title}")
        # TODO: Impl√©menter la pause individuelle
    
    def _remove_from_queue(self, title):
        """Retire une t√¢che de la file d'attente"""
        if messagebox.askyesno("Confirmation", f"Retirer {title} de la file d'attente ?"):
            # TODO: Impl√©menter la suppression individuelle
            messagebox.showinfo("Succ√®s", f"{title} retir√© de la file d'attente")
    
    def pause_queue(self):
        """Met en pause la file d'attente"""
        self.queue_worker_running = False
        self.pause_queue_button.configure(state="disabled")
        self.resume_queue_button.configure(state="normal")
        messagebox.showinfo("File d'attente", "File d'attente mise en pause")
        print("‚è∏Ô∏è File d'attente mise en pause")
    
    def resume_queue(self):
        """Reprend la file d'attente"""
        if not self.queue_worker_running:
            self.start_queue_worker()
            self.pause_queue_button.configure(state="normal")
            self.resume_queue_button.configure(state="disabled")
            messagebox.showinfo("File d'attente", "File d'attente reprise")
            print("‚ñ∂Ô∏è File d'attente reprise")
    
    def on_tab_changed(self, event):
        """Appel√© lors du changement de tab"""
        current_tab = getattr(self.navigation, 'current_tab', 'download')
        self.show_tab(current_tab)
    
    # -------- Utilitaires UI --------
    def _truncate_text(self, text: str, max_chars: int = 38) -> str:
        """Tronque le texte pour l'affichage UI uniquement.

        Ne modifie pas les noms de fichiers r√©els. Ajoute une ellipse si d√©passement.
        """
        if not isinstance(text, str):
            return ""
        text = text.strip()
        if len(text) <= max_chars:
            return text
        # Garder fin de cha√Æne utile (ex: extension) si pr√©sent
        head = max_chars - 1
        return text[:head] + "‚Ä¶"

    def create_context_menu(self):
        """Cr√©e le menu contextuel pour le champ URL"""
        try:
            self.context_menu = tk.Menu(self.root, tearoff=0)
            self.context_menu.add_command(label="üìã Coller", command=self.paste_url)
            self.context_menu.add_command(label="üìÑ Copier", command=self.copy_text)
            self.context_menu.add_command(label="‚úÇÔ∏è Couper", command=self.cut_text)
            self.context_menu.add_separator()
            self.context_menu.add_command(label="üìù Tout s√©lectionner", command=self.select_all_text)
            print("‚úÖ Menu contextuel cr√©√© avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du menu contextuel: {e}")
            self.context_menu = None
    
    def show_context_menu(self, event):
        """Affiche le menu contextuel au clic droit"""
        print(f"üîç √âv√©nement clic droit d√©tect√©: {event.type} - Button: {event.num}")
        try:
            # Positionner le menu √† l'endroit du clic
            self.context_menu.tk_popup(event.x_root, event.y_root)
            print("‚úÖ Menu contextuel affich√© avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'affichage du menu: {e}")
        finally:
            self.context_menu.grab_release()
    
    def copy_text(self):
        """Copie le texte s√©lectionn√©"""
        try:
            selected_text = self.url_entry.selection_get()
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
        except:
            pass
    
    def cut_text(self):
        """Coupe le texte s√©lectionn√©"""
        try:
            selected_text = self.url_entry.selection_get()
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
            self.url_entry.delete("sel.first", "sel.last")
        except:
            pass
    
    def select_all_text(self):
        """S√©lectionne tout le texte"""
        self.url_entry.select_range(0, tk.END)
        self.url_entry.icursor(tk.END)
    
    def paste_url(self, event=None):
        """Colle l'URL depuis le presse-papiers"""
        try:
            clipboard_content = self.root.clipboard_get()
            if "youtube.com" in clipboard_content or "youtu.be" in clipboard_content:
                self.url_entry.delete(0, tk.END)
                self.url_entry.insert(0, clipboard_content)
                self.analyze_video()
        except:
            pass
    
    def clean_youtube_url(self, url):
        """Nettoie l'URL YouTube en supprimant les param√®tres de playlist"""
        # Solution simple et efficace : couper avant &list=
        if '&list=' in url:
            clean_url = url.split('&list=')[0]
            print(f"üîß URL nettoy√©e (suppression playlist): {url} ‚Üí {clean_url}")
            return clean_url
        
        # Si pas de &list=, v√©rifier s'il y a d'autres param√®tres probl√©matiques
        if '&start_radio=' in url or '&feature=' in url or '&ab_channel=' in url:
            # Extraire l'ID de la vid√©o et reconstruire une URL propre
            import re
            match = re.search(r'youtube\.com/watch\?v=([a-zA-Z0-9_-]{11})', url)
            if match:
                video_id = match.group(1)
                clean_url = f"https://www.youtube.com/watch?v={video_id}"
                print(f"üîß URL nettoy√©e (suppression param√®tres): {url} ‚Üí {clean_url}")
                return clean_url
        
        # Si l'URL est d√©j√† propre, la retourner telle quelle
        print(f"‚úÖ URL d√©j√† propre: {url}")
        return url
    
    def validate_youtube_url(self, url):
        """Valide l'URL YouTube"""
        patterns = [
            r'(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/embed/)([a-zA-Z0-9_-]+)',
            r'youtube\.com/watch\?.*v=([a-zA-Z0-9_-]+)'
        ]
        
        for pattern in patterns:
            if re.search(pattern, url):
                return True
        return False
    
    def analyze_video(self):
        """Analyse la vid√©o YouTube"""
        url = self.url_entry.get().strip()
        
        if not url:
            messagebox.showerror("Erreur", "Veuillez saisir une URL YouTube")
            return
        
        if not self.validate_youtube_url(url):
            messagebox.showerror("Erreur", "URL YouTube invalide")
            return
        
        # Nettoyer l'URL avant l'analyse
        clean_url = self.clean_youtube_url(url)
        print(f"üîß URL originale: {url}")
        print(f"üîß URL nettoy√©e: {clean_url}")
        
        # D√©sactiver le bouton pendant l'analyse
        self.analyze_button.configure(state="disabled", text="‚è≥ Analyse...")
        self.status_label.configure(text="üîç Analyse de la vid√©o en cours...")
        
        # Lancer l'analyse dans un thread avec l'URL nettoy√©e
        threading.Thread(target=self._analyze_video_thread, args=(clean_url,), daemon=True).start()
    
    def _analyze_video_thread(self, url):
        """Thread pour l'analyse de la vid√©o avec yt-dlp"""
        try:
            # Configuration yt-dlp
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False,
            }
            
            # Ajouter FFmpeg du projet si disponible
            if self.ffmpeg_path:
                ydl_opts['ffmpeg_location'] = self.ffmpeg_path
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                # Extraire les informations
                info = ydl.extract_info(url, download=False)
                
                # R√©cup√©rer les informations de base
                title = info.get('title', 'Titre inconnu')
                duration = info.get('duration', 0)
                channel = info.get('uploader', 'Cha√Æne inconnue')
                thumbnail_url = info.get('thumbnail', '')
                
                # R√©cup√©rer les formats disponibles
                formats = info.get('formats', [])
                streams = []
                
                # Traiter chaque format
                for fmt in formats:
                    if fmt.get('vcodec') != 'none' and fmt.get('resolution'):
                        # Format vid√©o avec r√©solution
                        if fmt.get('acodec') != 'none':
                            # Vid√©o + audio
                            stream_type = 'video+audio'
                        else:
                            # Vid√©o seulement
                            stream_type = 'video_only'
                        
                        streams.append({
                            'format_id': fmt.get('format_id'),
                            'resolution': fmt.get('resolution'),
                            'filesize': fmt.get('filesize'),
                            'type': stream_type,
                            'format_obj': fmt,
                            'ext': fmt.get('ext'),
                            'fps': fmt.get('fps')
                        })
                    elif fmt.get('acodec') != 'none' and not fmt.get('vcodec', 'none') == 'none':
                        # Format audio seulement
                        streams.append({
                            'format_id': fmt.get('format_id'),
                            'resolution': f"Audio {fmt.get('abr', 'N/A')}kbps",
                            'filesize': fmt.get('filesize'),
                            'type': 'audio_only',
                            'format_obj': fmt,
                            'ext': fmt.get('ext'),
                            'abr': fmt.get('abr')
                        })
                
                # Trier les streams par qualit√©
                def sort_key(stream):
                    if 'Audio' in stream['resolution']:
                        return -1  # Audio en dernier
                    
                    res = stream['resolution']
                    if 'x' in res:  # Format "1920x1080"
                        try:
                            height = int(res.split('x')[1])
                            return height
                        except:
                            return 0
                    return 0
                
                streams.sort(key=sort_key, reverse=True)
                
                # Cr√©er l'objet d'information
                video_info = {
                    'title': title,
                    'duration': duration,
                    'channel': channel,
                    'thumbnail_url': thumbnail_url,
                    'streams': streams,
                    'yt_object': info
                }
                
                # Mettre √† jour l'interface
                self.root.after(0, self._update_video_info, video_info)
                
        except Exception as e:
            error_msg = f"Erreur lors de l'analyse : {str(e)}"
            print(error_msg)
            self.root.after(0, self._show_analysis_error, error_msg)
    
    def _update_video_info(self, info):
        """Met √† jour l'interface avec les informations de la vid√©o"""
        self.video_info = info
        
        # Mettre √† jour les informations
        self.video_title.configure(text=info['title'])
        
        # Format de la dur√©e
        if info['duration']:
            minutes = info['duration'] // 60
            seconds = info['duration'] % 60
            duration_str = f"‚è±Ô∏è Dur√©e: {minutes:02d}:{seconds:02d}"
        else:
            duration_str = "‚è±Ô∏è Dur√©e: Inconnue"
        self.video_duration.configure(text=duration_str)
        
        self.video_channel.configure(text=f"üì∫ Cha√Æne: {info['channel']}")
        
        # Charger la miniature
        self._load_thumbnail(info['thumbnail_url'])
        
        # Mettre √† jour les qualit√©s disponibles avec filtre style screenshot
        quality_values = []
        resolutions_found = {}  # Stocker {hauteur: stream} pour garder le meilleur
        
        for stream in info['streams']:
            resolution = stream['resolution']
            
            # Traiter les r√©solutions vid√©o
            if 'x' in resolution:
                try:
                    height = resolution.split('x')[1]
                    # Stocker le stream pour cette hauteur (le premier trouv√© est souvent le meilleur)
                    if height not in resolutions_found:
                        resolutions_found[height] = stream
                except:
                    pass  # Ignorer les erreurs de parsing
            elif 'Audio' in resolution and stream['type'] == 'audio_only':
                # Ajouter l'audio directement
                quality_values.append(resolution)
        
        # Convertir toutes les hauteurs trouv√©es en qualit√©s lisibles
        # Trier par hauteur d√©croissante pour avoir les meilleures en premier
        sorted_heights = sorted(resolutions_found.keys(), key=lambda x: int(x), reverse=True)
        
        for height in sorted_heights:
            resolution = resolutions_found[height]
            # Cr√©er un nom lisible pour chaque qualit√©
            if height == '2160':
                display_name = "4K (3840x2160)"
            elif height == '1620':
                display_name = "Ultra HD (3840x1620)"
            elif height == '1440':
                display_name = "1440p QHD (2560x1440)"
            elif height == '1080':
                display_name = "Full HD (1920x1080)"
            elif height == '810':
                display_name = "HD+ (1920x810)"
            elif height == '720':
                display_name = "720p HD (1280x720)"
            elif height == '540':
                display_name = "HD (1280x540)"
            elif height == '480':
                display_name = "480p (854x480)"
            elif height == '360':
                display_name = "360p (640x360)"
            elif height == '270':
                display_name = "270p (640x270)"
            elif height == '240':
                display_name = "240p (426x240)"
            elif height == '180':
                display_name = "180p (426x180)"
            elif height == '144':
                display_name = "144p (256x144)"
            elif height == '128':
                display_name = "128p (256x128)"
            elif height == '90':
                display_name = "90p (213x90)"
            elif height == '45':
                display_name = "45p (106x45)"
            elif height == '27':
                display_name = "27p (48x27)"
            else:
                display_name = f"{height}p ({resolutions_found[height]['resolution']})"
            
            quality_values.append(display_name)
        
        # Trier les qualit√©s (4K en premier, audio √† la fin)
        def sort_quality(q):
            if 'Audio' in q:
                return -1  # Audio √† la fin
            elif '2160p' in q:
                return 2160
            elif '1440p' in q:
                return 1440
            elif '1080p' in q:
                return 1080
            elif '720p' in q:
                return 720
            elif '480p' in q:
                return 480
            elif '360p' in q:
                return 360
            elif '240p' in q:
                return 240
            elif '144p' in q:
                return 144
            else:
                return 0
        
        quality_values.sort(key=sort_quality, reverse=True)
        
        self.quality_combo.configure(values=quality_values)
        
        # S√©lectionner la meilleure qualit√© par d√©faut
        if quality_values:
            self.quality_combo.set(quality_values[0])
        
        # R√©activer le bouton
        self.analyze_button.configure(state="normal", text="üîç Analyser")
        self.status_label.configure(text="Vid√©o analys√©e avec succ√®s - Pr√™t √† t√©l√©charger")
        
        # Actualiser l'historique
        self.refresh_history()
    
    def _load_thumbnail(self, url):
        """Charge et affiche la miniature de la vid√©o"""
        try:
            # Cr√©er une session requests avec SSL d√©sactiv√©
            session = requests.Session()
            session.verify = False
            
            response = session.get(url, timeout=10)
            if response.status_code == 200:
                # Charger l'image avec Pillow
                from PIL import Image
                image = Image.open(io.BytesIO(response.content))
                
                # Redimensionner √† 320x180 en gardant les proportions
                image.thumbnail((320, 180), Image.Resampling.LANCZOS)
                
                # Convertir pour CustomTkinter (meilleure compatibilit√© HiDPI)
                ctk_image = ctk.CTkImage(light_image=image, size=(320, 180))
                
                # Mettre √† jour la miniature
                self.thumbnail.set_image(ctk_image)
                
        except Exception as e:
            error_text = "Erreur de chargement\nde la miniature"
            if "SSL" in str(e) or "certificate" in str(e).lower():
                error_text = "Erreur SSL lors du\nchargement de la miniature"
            self.thumbnail.set_error(error_text)
    
    def _format_size(self, size_bytes):
        """Formate la taille en MB/GB"""
        if not size_bytes:
            return "Inconnue"
        
        mb = size_bytes / (1024 * 1024)
        if mb < 1024:
            return f"{mb:.1f} MB"
        else:
            gb = mb / 1024
            return f"{gb:.1f} GB"
    
    def _show_analysis_error(self, error_msg):
        """Affiche une erreur d'analyse"""
        self.analyze_button.configure(state="normal", text="üîç Analyser")
        self.status_label.configure(text="‚ùå Erreur lors de l'analyse")
        messagebox.showerror("Erreur d'analyse", error_msg)
    
    def browse_folder(self):
        """Ouvre le s√©lecteur de dossier"""
        folder = filedialog.askdirectory(initialdir=self.download_path)
        if folder:
            self.download_path = folder
            # Limiter l'affichage du chemin
            display_path = folder
            if len(display_path) > 50:
                display_path = "..." + display_path[-47:]
            self.path_entry.delete(0, tk.END)
            self.path_entry.insert(0, display_path)
    
    def start_download(self):
        """D√©marre le t√©l√©chargement en l'ajoutant √† la file d'attente"""
        if not self.video_info:
            messagebox.showerror("Erreur", "Veuillez analyser une vid√©o d'abord")
            return
        
        # R√©cup√©rer les options
        selected_quality = self.quality_combo.get()
        if not selected_quality or selected_quality == "Analyser d'abord une vid√©o":
            messagebox.showerror("Erreur", "Veuillez s√©lectionner une qualit√©")
            return
        
        output_format = self.format_combo.get()
        filename = self.filename_entry.get().strip()
        download_path = self.path_entry.get().strip()
        
        if not filename or filename == "Nom personnalis√© (optionnel)":
            filename = self.video_info.get('title', 'video')
        
        if not download_path:
            download_path = str(Path.home() / "Downloads")
        
        # V√©rifier que le dossier existe
        if not os.path.exists(download_path):
            try:
                os.makedirs(download_path)
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible de cr√©er le dossier: {e}")
                return
        
        # Ajouter √† la file d'attente
        task = self.add_to_queue(
            self.url_entry.get().strip(),
            selected_quality,
            output_format,
            filename,
            download_path
        )
        
        # Mettre √† jour l'interface
        self.status_label.configure(text=f"Ajout√© √† la file d'attente: {task.id}")
        self.download_button.configure(text="‚¨áÔ∏è Ajouter √† la file")
        
        # R√©initialiser les champs
        self.url_entry.delete(0, tk.END)
        self.quality_combo.set("Analyser d'abord une vid√©o")
        self.filename_entry.delete(0, tk.END)
        
        # Pas besoin de pop-up ici car _show_queue_confirmation() s'en charge d√©j√†
        # Le pop-up est affich√© automatiquement par add_to_queue()
    
    def _download_video_thread(self, stream_info, output_format):
        """Thread pour le t√©l√©chargement de la vid√©o avec yt-dlp"""
        try:
            # G√©n√©rer le nom de fichier
            custom_filename = self.filename_entry.get().strip()
            if custom_filename and custom_filename != "Nom personnalis√© (optionnel)":
                safe_filename = "".join(c for c in custom_filename if c.isalnum() or c in (' ', '-', '_')).rstrip()
                filename = f"{safe_filename}{output_format}"
            else:
                safe_title = "".join(c for c in self.video_info['title'] if c.isalnum() or c in (' ', '-', '_')).rstrip()
                filename = f"{safe_title}{output_format}"
            
            output_path = os.path.join(self.download_path, filename)
            
            # Configuration yt-dlp pour le t√©l√©chargement avec audio
            if stream_info['type'] == 'video_only':
                # Pour vid√©o seule, forcer fusion avec meilleur audio
                format_selector = f"{stream_info['format_id']}+bestaudio"
            elif stream_info['type'] == 'video+audio':
                # Pour vid√©o+audio int√©gr√©
                format_selector = stream_info['format_id']
            else:
                # Pour audio seul
                format_selector = stream_info['format_id']
            
            ydl_opts = {
                'format': format_selector,
                'outtmpl': output_path,
                'quiet': True,
                'no_warnings': True,
                'merge_output_format': output_format.replace('.', ''),
            }
            
            # Ajouter FFmpeg du projet si disponible
            if self.ffmpeg_path:
                ydl_opts['ffmpeg_location'] = self.ffmpeg_path
            
            # Hook de progression pour yt-dlp
            def progress_hook(d):
                if d['status'] == 'downloading':
                    if 'total_bytes' in d and d['total_bytes']:
                        percent = d['downloaded_bytes'] / d['total_bytes']
                        speed = d.get('speed', 0)
                        speed_str = f"{speed/1024/1024:.1f} MB/s" if speed else "-- MB/s"
                        status = f"T√©l√©chargement... {percent*100:.1f}% - {speed_str}"
                        self.root.after(0, self.progress_bar.update_progress, status, percent)
                elif d['status'] == 'finished':
                    self.root.after(0, self.progress_bar.update_progress, "Finalisation...", 0.9)
            
            ydl_opts['progress_hooks'] = [progress_hook]
            
            # Mettre √† jour le statut
            self.root.after(0, self.progress_bar.update_progress, "D√©but du t√©l√©chargement...", 0)
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([self.url_entry.get().strip()])
            
            # Termin√©
            self.root.after(0, self._download_complete, output_path)
            
        except Exception as e:
            self.root.after(0, self._show_error, f"Erreur lors du t√©l√©chargement : {str(e)}")
    
    def _download_complete(self, output_path):
        """Appel√© quand le t√©l√©chargement est termin√©"""
        self.is_downloading = False
        self.download_button.configure(state="normal", text="‚¨áÔ∏è T√©l√©charger")
        self.progress_bar.hide()
        self.status_label.configure(text="T√©l√©chargement termin√© avec succ√®s !")
        
        # Enregistrer dans l'historique
        self.history.add_download(
            title=self.video_info['title'],
            url=self.url_entry.get().strip(),
            path=output_path,
            format=self.format_combo.get(),
            quality=self.quality_combo.get().split(' (')[0]
        )
        
        # Notification
        messagebox.showinfo("T√©l√©chargement termin√©", f"Vid√©o t√©l√©charg√©e avec succ√®s !\n\nEmplacement: {output_path}")
        
        # Actualiser l'historique
        self.refresh_history()
    
    def _show_error(self, error_msg):
        """Affiche une erreur"""
        self.is_downloading = False
        self.download_button.configure(state="normal", text="‚¨áÔ∏è T√©l√©charger")
        self.progress_bar.hide()
        self.status_label.configure(text="‚ùå Erreur lors du t√©l√©chargement")
        messagebox.showerror("Erreur de t√©l√©chargement", error_msg)
    
    def change_theme(self, theme):
        """Change le th√®me de l'application"""
        print(f"üîÑ Changement de th√®me vers: {theme}")
        
        if theme == "Clair":
            MacTubeTheme.force_light_mode()
        elif theme == "Sombre":
            MacTubeTheme.force_dark_mode()
        else:
            ctk.set_appearance_mode("system")
        
        # Attendre un peu que CustomTkinter applique le th√®me
        self.root.after(100, self._update_theme_colors)
        
        print(f"‚úÖ Th√®me chang√© vers: {theme}")
    
    def _update_theme_colors(self):
        """Met √† jour les couleurs de tous les composants selon le th√®me actuel"""
        try:
            # Forcer la mise √† jour du th√®me CustomTkinter
            current_theme = ctk.get_appearance_mode()
            print(f"üîß Th√®me actuel: {current_theme}")
            
            # Mettre √† jour la couleur de fond principale
            bg_color = MacTubeTheme.get_color('bg_primary')
            self.root.configure(fg_color=bg_color)
    
            
            # Mettre √† jour le contenu principal
            if hasattr(self, 'main_content'):
                self.main_content.configure(fg_color=bg_color)
                print("‚úÖ Contenu principal mis √† jour")
            
            # Mettre √† jour la barre de navigation (IMPORTANT !)
            if hasattr(self, 'navigation'):
                nav_bg = MacTubeTheme.get_color('bg_header')
                # Mettre √† jour le frame de navigation
                if hasattr(self.navigation, 'nav_frame'):
                    self.navigation.nav_frame.configure(fg_color=nav_bg)
                    print(f"‚úÖ Frame de navigation mis √† jour avec: {nav_bg}")
                
                # Mettre √† jour tous les boutons de navigation
                nav_text_color = MacTubeTheme.get_color('text_primary')
                nav_hover_color = MacTubeTheme.get_color('bg_secondary')
                for button in [self.navigation.download_btn, self.navigation.audio_btn, 
                             self.navigation.transcoder_btn, self.navigation.history_btn, 
                             self.navigation.queue_btn, self.navigation.settings_btn]:
                    if button:
                        button.configure(text_color=nav_text_color, hover_color=nav_hover_color)
                        print(f"‚úÖ Bouton navigation mis √† jour: {button.cget('text')}")
                
                # Mettre √† jour l'indicateur actif
                if hasattr(self.navigation, 'active_indicator'):
                    self.navigation.active_indicator.configure(fg_color=MacTubeTheme.get_color('primary'))
                    print("‚úÖ Indicateur actif mis √† jour")
            
            # Mettre √† jour les cartes avec couleurs forc√©es
            card_color = MacTubeTheme.get_color('bg_card')
            if hasattr(self, 'video_card'):
                self.video_card.frame.configure(fg_color=card_color)
                # Mettre √† jour aussi le titre de la carte
                if hasattr(self.video_card, 'title_label'):
                    self.video_card.title_label.configure(text_color=MacTubeTheme.get_color('text_primary'))
                print("‚úÖ Carte vid√©o mise √† jour")
            if hasattr(self, 'options_card'):
                self.options_card.frame.configure(fg_color=card_color)
                if hasattr(self.options_card, 'title_label'):
                    self.options_card.title_label.configure(text_color=MacTubeTheme.get_color('text_primary'))
                print("‚úÖ Carte options mise √† jour")
            if hasattr(self, 'history_card'):
                self.history_card.frame.configure(fg_color=card_color)
                if hasattr(self.history_card, 'title_label'):
                    self.history_card.title_label.configure(text_color=MacTubeTheme.get_color('text_primary'))
                print("‚úÖ Carte historique mise √† jour")
            if hasattr(self, 'queue_card'):
                self.queue_card.frame.configure(fg_color=card_color)
                if hasattr(self.queue_card, 'title_label'):
                    self.queue_card.title_label.configure(text_color=MacTubeTheme.get_color('text_primary'))
                print("‚úÖ Carte file d'attente mise √† jour")
            if hasattr(self, 'settings_card'):
                self.settings_card.frame.configure(fg_color=card_color)
                if hasattr(self.settings_card, 'title_label'):
                    self.settings_card.title_label.configure(text_color=MacTubeTheme.get_color('text_primary'))
                print("‚úÖ Carte param√®tres mise √† jour")
            
            # Mettre √† jour les labels avec couleurs forc√©es
            self._update_label_colors()
            
            # Mettre √† jour les entr√©es avec couleurs forc√©es
            self._update_entry_colors()
            
            # Mettre √† jour les combobox et autres composants
            self._update_combo_colors()
            
            # Mettre √† jour les frames et conteneurs
            self._update_frame_colors()
            
            # Mettre √† jour aussi l'onglet Audio si pr√©sent
            if hasattr(self, 'audio_extractor') and hasattr(self.audio_extractor, 'update_theme'):
                self.audio_extractor.update_theme()
            
            # Mettre √† jour aussi l'onglet Transcodeur si pr√©sent
            if hasattr(self, 'transcoder') and hasattr(self.transcoder, 'update_theme'):
                self.transcoder.update_theme()

            # Forcer la mise √† jour de l'interface
            self.root.update_idletasks()
            self.root.update()
            
            print(f"‚úÖ Th√®me mis √† jour: {current_theme}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur mise √† jour th√®me: {e}")
            import traceback
            traceback.print_exc()
    
    def _update_label_colors(self):
        """Met √† jour les couleurs des labels"""
        try:
            # Couleur du texte selon le th√®me
            text_color = MacTubeTheme.get_color('text_primary')
    
            
            # Labels principaux
            if hasattr(self, 'video_title'):
                self.video_title.configure(text_color=text_color)
                print("‚úÖ Label titre vid√©o mis √† jour")
            if hasattr(self, 'video_duration'):
                self.video_duration.configure(text_color=text_color)
                print("‚úÖ Label dur√©e vid√©o mis √† jour")
            if hasattr(self, 'video_channel'):
                self.video_channel.configure(text_color=text_color)
                print("‚úÖ Label cha√Æne vid√©o mis √† jour")
            if hasattr(self, 'status_label'):
                self.status_label.configure(text_color=text_color)
                print("‚úÖ Label statut mis √† jour")
            
            # Labels des sections
            if hasattr(self, 'queue_info_label'):
                self.queue_info_label.configure(text_color=text_color)
                print("‚úÖ Label info file d'attente mis √† jour")
            if hasattr(self, 'max_downloads_label'):
                self.max_downloads_label.configure(text_color=text_color)
                print("‚úÖ Label max t√©l√©chargements mis √† jour")
            
            # Mettre √† jour tous les labels de navigation
            if hasattr(self, 'navigation'):
                nav_hover_color = MacTubeTheme.get_color('bg_secondary')
                for button in [self.navigation.download_btn, self.navigation.audio_btn, 
                             self.navigation.transcoder_btn, self.navigation.history_btn, 
                             self.navigation.queue_btn, self.navigation.settings_btn]:
                    if button:
                        button.configure(text_color=text_color, hover_color=nav_hover_color)
                print("‚úÖ Boutons de navigation mis √† jour")
            
            # Mettre √† jour TOUS les labels cr√©√©s directement (IMPORTANT !)
            self._update_all_direct_labels(text_color)
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur mise √† jour labels: {e}")
            import traceback
            traceback.print_exc()
    
    def _update_all_direct_labels(self, text_color):
        """Met √† jour tous les labels cr√©√©s directement avec MacTubeTheme"""
        try:
            print("üîç Recherche de tous les labels directs...")
            
            # Parcourir tous les widgets de l'interface pour trouver les labels
            def update_widget_colors(widget):
                """Met √† jour r√©cursivement tous les widgets"""
                try:
                    # Si c'est un label, mettre √† jour sa couleur
                    if isinstance(widget, ctk.CTkLabel):
                        widget.configure(text_color=text_color)
                        print(f"‚úÖ Label direct mis √† jour: {widget.cget('text')[:30]}...")
                    
                    # R√©cursivement mettre √† jour tous les enfants
                    for child in widget.winfo_children():
                        update_widget_colors(child)
                        
                except Exception as e:
                    # Ignorer les erreurs sur les widgets individuels
                    pass
            
            # Commencer par la racine
            update_widget_colors(self.root)
            print("‚úÖ Tous les labels directs mis √† jour")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur mise √† jour labels directs: {e}")
            import traceback
            traceback.print_exc()
    
    def _update_entry_colors(self):
        """Met √† jour les couleurs des champs de saisie"""
        try:
            # Couleurs selon le th√®me
            bg_color = MacTubeTheme.get_color('bg_secondary')
            border_color = MacTubeTheme.get_color('text_secondary')
            text_color = MacTubeTheme.get_color('text_primary')
            
    
            
            # Champs de saisie
            if hasattr(self, 'url_entry'):
                self.url_entry.configure(
                    fg_color=bg_color,
                    border_color=border_color,
                    text_color=text_color
                )
                print("‚úÖ Champ URL mis √† jour")
            if hasattr(self, 'filename_entry'):
                self.filename_entry.configure(
                    fg_color=bg_color,
                    border_color=border_color,
                    text_color=text_color
                )
                print("‚úÖ Champ nom de fichier mis √† jour")
            if hasattr(self, 'path_entry'):
                self.path_entry.configure(
                    fg_color=bg_color,
                    border_color=border_color,
                    text_color=text_color
                )
                print("‚úÖ Champ chemin mis √† jour")
            
            # Mettre √† jour aussi les placeholders si possible
            self._update_placeholder_colors()
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur mise √† jour entr√©es: {e}")
            import traceback
            traceback.print_exc()
    
    def _update_placeholder_colors(self):
        """Met √† jour les couleurs des placeholders"""
        try:
            # Couleur du placeholder selon le th√®me
            placeholder_color = MacTubeTheme.get_color('text_secondary')
    
            
            # Mettre √† jour les placeholders des champs
            if hasattr(self, 'url_entry'):
                # Reconfigurer le champ avec le nouveau placeholder
                current_placeholder = self.url_entry.cget('placeholder_text')
                self.url_entry.configure(placeholder_text_color=placeholder_color)
                print("‚úÖ Placeholder URL mis √† jour")
                
            if hasattr(self, 'filename_entry'):
                current_placeholder = self.filename_entry.cget('placeholder_text')
                self.filename_entry.configure(placeholder_text_color=placeholder_color)
                print("‚úÖ Placeholder nom de fichier mis √† jour")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur mise √† jour placeholders: {e}")
    
    def _update_combo_colors(self):
        """Met √† jour les couleurs des combobox"""
        try:
            if hasattr(self, 'quality_combo'):
                self.quality_combo.configure(fg_color=MacTubeTheme.get_color('bg_secondary'))
                self.quality_combo.configure(border_color=MacTubeTheme.get_color('text_secondary'))
                self.quality_combo.configure(text_color=MacTubeTheme.get_color('text_primary'))
            if hasattr(self, 'format_combo'):
                self.format_combo.configure(fg_color=MacTubeTheme.get_color('bg_secondary'))
                self.format_combo.configure(border_color=MacTubeTheme.get_color('text_secondary'))
                self.format_combo.configure(text_color=MacTubeTheme.get_color('text_primary'))
            if hasattr(self, 'theme_combo'):
                self.theme_combo.configure(fg_color=MacTubeTheme.get_color('bg_secondary'))
                self.theme_combo.configure(border_color=MacTubeTheme.get_color('text_secondary'))
                self.theme_combo.configure(text_color=MacTubeTheme.get_color('text_primary'))
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur mise √† jour combobox: {e}")
    
    def _update_frame_colors(self):
        """Met √† jour les couleurs des frames et conteneurs"""
        try:
            if hasattr(self, 'download_frame'):
                self.download_frame.configure(fg_color=MacTubeTheme.get_color('bg_card'))
            if hasattr(self, 'analysis_card'):
                self.analysis_card.frame.configure(fg_color=MacTubeTheme.get_color('bg_card'))
            if hasattr(self, 'options_card'):
                self.options_card.frame.configure(fg_color=MacTubeTheme.get_color('bg_card'))
            if hasattr(self, 'history_frame'):
                self.history_frame.configure(fg_color=MacTubeTheme.get_color('bg_card'))
            if hasattr(self, 'queue_frame'):
                self.queue_frame.configure(fg_color=MacTubeTheme.get_color('bg_card'))
            if hasattr(self, 'settings_frame'):
                self.settings_frame.configure(fg_color=MacTubeTheme.get_color('bg_card'))
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur mise √† jour frames: {e}")
    
    def refresh_history(self):
        """Actualise l'historique"""
        downloads = self.history.get_downloads()
        
        self.history_list.delete("1.0", tk.END)
        
        if not downloads:
            self.history_list.insert("1.0", "Aucun t√©l√©chargement dans l'historique.")
        else:
            for i, download in enumerate(downloads[-20:], 1):  # 20 derniers
                date_str = download['date']
                entry = f"{i}. {download['title']}\n"
                entry += f"   üìÖ {date_str} | üé¨ {download['quality']} | üìÅ {download['format']}\n"
                entry += f"   üìÇ {download['path']}\n\n"
                self.history_list.insert(tk.END, entry)
    
    def clear_history(self):
        """Efface l'historique"""
        if messagebox.askyesno("Confirmation", "Voulez-vous vraiment effacer l'historique ?"):
            self.history.clear()
            self.refresh_history()
    
    def run(self):
        """Lance l'application"""
        self.root.mainloop()

    def clear_history_on_exit(self):
        """Vide l'historique √† la fermeture de l'application"""
        try:
            # Vider la liste d'historique
            if hasattr(self, 'history_list') and self.history_list:
                try:
                    self.history_list.delete(0, tk.END)
                except:
                    pass  # Ignorer les erreurs de suppression
            
            # Vider la liste des t√¢ches
            if hasattr(self, 'history_tasks'):
                self.history_tasks.clear()
            
            # Vider l'historique principal et sauvegarder
            if hasattr(self, 'history'):
                self.history.clear()
                print("üßπ Historique vid√© avec succ√®s")
            else:
                print("‚ö†Ô∏è  Module d'historique non trouv√©")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du nettoyage: {e}")

    def on_closing(self):
        """Gestionnaire de fermeture avec nettoyage automatique de l'historique"""
        try:
            # Nettoyer l'historique automatiquement
            self.clear_history_on_exit()
            
            # Fermeture normale
            if hasattr(self, 'root'):
                self.root.quit()
                self.root.destroy()
        except Exception as e:
            print(f"‚ùå Erreur lors de la fermeture: {e}")
            # Fermeture forc√©e en cas d'erreur
            if hasattr(self, 'root'):
                self.root.quit()
                self.root.destroy()

class MacTubeHistory:
    """Gestionnaire d'historique pour MacTube"""
    
    def __init__(self):
        self.history_file = Path.home() / ".mactube_history.json"
        self.downloads = self.load_history()
    
    def load_history(self):
        """Charge l'historique depuis le fichier"""
        try:
            if self.history_file.exists():
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except:
            return []
    
    def save_history(self):
        """Sauvegarde l'historique"""
        try:
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(self.downloads, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Erreur de sauvegarde: {e}")
    
    def add_download(self, title, url, path, format, quality):
        """Ajoute un t√©l√©chargement √† l'historique"""
        download = {
            'title': title,
            'url': url,
            'path': path,
            'format': format,
            'quality': quality,
            'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.downloads.append(download)
        self.save_history()
    
    def get_downloads(self):
        """R√©cup√®re tous les t√©l√©chargements"""
        return self.downloads
    
    def clear(self):
        """Efface l'historique"""
        self.downloads = []
        self.save_history()

def main():
    """Fonction principale"""
    try:
        print("üöÄ Lancement de MacTube - YouTube Downloader...")
        app = MacTubeApp()
        app.run()
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("‚úÖ MacTube ferm√© normalement")
        print("üëã Au revoir !")

if __name__ == "__main__":
    main()
